{"ast":null,"code":"import _slicedToArray from \"/home/murilocht/Documentos/projetos/reactjs/rocketfy/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/murilocht/Documentos/projetos/reactjs/rocketfy/src/components/Card/index.js\";\nimport React, { useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { Container, Label } from './styles';\nexport default function Card({\n  data,\n  index\n}) {\n  const ref = useRef();\n\n  const _useDrag = useDrag({\n    item: {\n      type: 'CARD',\n      index\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  }),\n        _useDrag2 = _slicedToArray(_useDrag, 2),\n        isDragging = _useDrag2[0].isDragging,\n        dragRef = _useDrag2[1];\n\n  const _useDrop = useDrop({\n    accept: 'CARD',\n\n    hover(item, monitor) {\n      console.log(item.index, data.index);\n    }\n\n  }),\n        _useDrop2 = _slicedToArray(_useDrop, 2),\n        dropRef = _useDrop2[1];\n\n  dragRef(dropRef(ref));\n  return React.createElement(Container, {\n    ref: ref,\n    isDragging: isDragging,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, data.labels.map(label => React.createElement(Label, {\n    key: label,\n    color: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }))), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, data.content), data.user && React.createElement(\"img\", {\n    src: data.user,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/murilocht/Documentos/projetos/reactjs/rocketfy/src/components/Card/index.js"],"names":["React","useRef","useDrag","useDrop","Container","Label","Card","data","index","ref","item","type","collect","monitor","isDragging","dragRef","accept","hover","console","log","dropRef","labels","map","label","content","user"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,WAAjC;AAEA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,UAAjC;AAEA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAd,EAA+B;AAC1C,QAAMC,GAAG,GAAGR,MAAM,EAAlB;;AAD0C,mBAGRC,OAAO,CAAC;AACtCQ,IAAAA,IAAI,EAAE;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBH,MAAAA;AAAhB,KADgC;AAEtCI,IAAAA,OAAO,EAAEC,OAAO,KAAK;AACjBC,MAAAA,UAAU,EAAED,OAAO,CAACC,UAAR;AADK,KAAL;AAFsB,GAAD,CAHC;AAAA;AAAA,QAGjCA,UAHiC,gBAGjCA,UAHiC;AAAA,QAGnBC,OAHmB;;AAAA,mBAUtBZ,OAAO,CAAC;AACxBa,IAAAA,MAAM,EAAE,MADgB;;AAExBC,IAAAA,KAAK,CAACP,IAAD,EAAOG,OAAP,EAAgB;AACjBK,MAAAA,OAAO,CAACC,GAAR,CAAYT,IAAI,CAACF,KAAjB,EAAwBD,IAAI,CAACC,KAA7B;AACH;;AAJuB,GAAD,CAVe;AAAA;AAAA,QAUjCY,OAViC;;AAiB1CL,EAAAA,OAAO,CAACK,OAAO,CAACX,GAAD,CAAR,CAAP;AAEA,SACI,oBAAC,SAAD;AAAW,IAAA,GAAG,EAAEA,GAAhB;AAAqB,IAAA,UAAU,EAAEK,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKP,IAAI,CAACc,MAAL,CAAYC,GAAZ,CAAgBC,KAAK,IAAI,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAEA,KAAZ;AAAmB,IAAA,KAAK,EAAEA,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAzB,CADL,CADH,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIhB,IAAI,CAACiB,OAAT,CALJ,EAOMjB,IAAI,CAACkB,IAAL,IAAc;AAAK,IAAA,GAAG,EAAElB,IAAI,CAACkB,IAAf;AAAqB,IAAA,GAAG,EAAC,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPpB,CADJ;AAWH","sourcesContent":["import React, { useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\n\nimport { Container, Label } from './styles';\n\nexport default function Card({ data, index }) {\n    const ref = useRef();\n\n    const [{ isDragging }, dragRef] = useDrag({\n        item: { type: 'CARD', index },\n        collect: monitor => ({\n            isDragging: monitor.isDragging()\n        })\n    });\n\n    const [, dropRef] = useDrop({\n        accept: 'CARD',\n        hover(item, monitor) {\n            console.log(item.index, data.index)\n        }\n    });\n\n    dragRef(dropRef(ref));\n\n    return (\n        <Container ref={ref} isDragging={isDragging}>\n           <header>\n               {data.labels.map(label => <Label key={label} color={label} />)}\n            </header> \n\n            <p>{data.content}</p>\n\n            { data.user && (<img src={data.user} alt=\"\"/>)}\n        </Container>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}