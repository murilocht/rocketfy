{"ast":null,"code":"import _slicedToArray from \"/home/murilocht/Documentos/projetos/reactjs/rocketfy/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/murilocht/Documentos/projetos/reactjs/rocketfy/src/components/Card/index.js\";\nimport React, { useRef, useContext } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { Container, Label } from './styles';\nimport BoardContext from '../Board/context';\nexport default function Card({\n  data,\n  index\n}) {\n  const ref = useRef();\n\n  const _useContext = useContext(BoardContext),\n        move = _useContext.move;\n\n  const _useDrag = useDrag({\n    item: {\n      type: 'CARD',\n      index\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  }),\n        _useDrag2 = _slicedToArray(_useDrag, 2),\n        isDragging = _useDrag2[0].isDragging,\n        dragRef = _useDrag2[1];\n\n  const _useDrop = useDrop({\n    accept: 'CARD',\n\n    hover(item, monitor) {\n      const draggedListIndex = item.listIndex; //const targetListIndex = listIndex;\n\n      const draggedIndex = item.index;\n      const targetIndex = index;\n\n      if (draggedIndex === targetIndex) {\n        return;\n      }\n\n      const targetSize = ref.current.getBoundingClientRect();\n      const targetCenter = (targetSize.bottom - targetSize.top) / 2;\n      const draggedOffset = monitor.getClientOffset();\n      const draggedTop = draggedOffset.y - targetSize.top;\n\n      if (draggedIndex < targetIndex && draggedTop < targetCenter) {\n        return;\n      }\n\n      if (draggedIndex > targetIndex && draggedTop > targetCenter) {\n        return;\n      }\n\n      move(draggedListIndex, draggedIndex, targetIndex);\n    }\n\n  }),\n        _useDrop2 = _slicedToArray(_useDrop, 2),\n        dropRef = _useDrop2[1];\n\n  dragRef(dropRef(ref));\n  return React.createElement(Container, {\n    ref: ref,\n    isDragging: isDragging,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, data.labels.map(label => React.createElement(Label, {\n    key: label,\n    color: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }))), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, data.content), data.user && React.createElement(\"img\", {\n    src: data.user,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/murilocht/Documentos/projetos/reactjs/rocketfy/src/components/Card/index.js"],"names":["React","useRef","useContext","useDrag","useDrop","Container","Label","BoardContext","Card","data","index","ref","move","item","type","collect","monitor","isDragging","dragRef","accept","hover","draggedListIndex","listIndex","draggedIndex","targetIndex","targetSize","current","getBoundingClientRect","targetCenter","bottom","top","draggedOffset","getClientOffset","draggedTop","y","dropRef","labels","map","label","content","user"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,UAAxB,QAA0C,OAA1C;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,WAAjC;AAEA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,UAAjC;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AAEA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAd,EAA+B;AAC1C,QAAMC,GAAG,GAAGV,MAAM,EAAlB;;AAD0C,sBAEzBC,UAAU,CAACK,YAAD,CAFe;AAAA,QAElCK,IAFkC,eAElCA,IAFkC;;AAAA,mBAIRT,OAAO,CAAC;AACtCU,IAAAA,IAAI,EAAE;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBJ,MAAAA;AAAhB,KADgC;AAEtCK,IAAAA,OAAO,EAAEC,OAAO,KAAK;AACjBC,MAAAA,UAAU,EAAED,OAAO,CAACC,UAAR;AADK,KAAL;AAFsB,GAAD,CAJC;AAAA;AAAA,QAIjCA,UAJiC,gBAIjCA,UAJiC;AAAA,QAInBC,OAJmB;;AAAA,mBAWtBd,OAAO,CAAC;AACxBe,IAAAA,MAAM,EAAE,MADgB;;AAExBC,IAAAA,KAAK,CAACP,IAAD,EAAOG,OAAP,EAAgB;AACjB,YAAMK,gBAAgB,GAAGR,IAAI,CAACS,SAA9B,CADiB,CAEjB;;AAEA,YAAMC,YAAY,GAAGV,IAAI,CAACH,KAA1B;AACA,YAAMc,WAAW,GAAGd,KAApB;;AAEA,UAAIa,YAAY,KAAKC,WAArB,EAAkC;AAC9B;AACH;;AAED,YAAMC,UAAU,GAAGd,GAAG,CAACe,OAAJ,CAAYC,qBAAZ,EAAnB;AACA,YAAMC,YAAY,GAAG,CAACH,UAAU,CAACI,MAAX,GAAoBJ,UAAU,CAACK,GAAhC,IAAuC,CAA5D;AAEA,YAAMC,aAAa,GAAGf,OAAO,CAACgB,eAAR,EAAtB;AACA,YAAMC,UAAU,GAAGF,aAAa,CAACG,CAAd,GAAkBT,UAAU,CAACK,GAAhD;;AAEA,UAAIP,YAAY,GAAGC,WAAf,IAA8BS,UAAU,GAAGL,YAA/C,EAA6D;AACzD;AACH;;AAED,UAAIL,YAAY,GAAGC,WAAf,IAA8BS,UAAU,GAAGL,YAA/C,EAA6D;AACzD;AACH;;AAEDhB,MAAAA,IAAI,CAACS,gBAAD,EAAmBE,YAAnB,EAAiCC,WAAjC,CAAJ;AACH;;AA5BuB,GAAD,CAXe;AAAA;AAAA,QAWjCW,OAXiC;;AA0C1CjB,EAAAA,OAAO,CAACiB,OAAO,CAACxB,GAAD,CAAR,CAAP;AAEA,SACI,oBAAC,SAAD;AAAW,IAAA,GAAG,EAAEA,GAAhB;AAAqB,IAAA,UAAU,EAAEM,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKR,IAAI,CAAC2B,MAAL,CAAYC,GAAZ,CAAgBC,KAAK,IAAI,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAEA,KAAZ;AAAmB,IAAA,KAAK,EAAEA,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAzB,CADL,CADH,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAI7B,IAAI,CAAC8B,OAAT,CALJ,EAOM9B,IAAI,CAAC+B,IAAL,IAAc;AAAK,IAAA,GAAG,EAAE/B,IAAI,CAAC+B,IAAf;AAAqB,IAAA,GAAG,EAAC,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPpB,CADJ;AAWH","sourcesContent":["import React, { useRef, useContext } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\n\nimport { Container, Label } from './styles';\nimport BoardContext from '../Board/context';\n\nexport default function Card({ data, index }) {\n    const ref = useRef();\n    const { move } = useContext(BoardContext);\n\n    const [{ isDragging }, dragRef] = useDrag({\n        item: { type: 'CARD', index },\n        collect: monitor => ({\n            isDragging: monitor.isDragging()\n        })\n    });\n\n    const [, dropRef] = useDrop({\n        accept: 'CARD',\n        hover(item, monitor) {\n            const draggedListIndex = item.listIndex;\n            //const targetListIndex = listIndex;\n\n            const draggedIndex = item.index;\n            const targetIndex = index;\n\n            if (draggedIndex === targetIndex) {\n                return;\n            }\n\n            const targetSize = ref.current.getBoundingClientRect();\n            const targetCenter = (targetSize.bottom - targetSize.top) / 2; \n\n            const draggedOffset = monitor.getClientOffset();\n            const draggedTop = draggedOffset.y - targetSize.top;\n\n            if (draggedIndex < targetIndex && draggedTop < targetCenter) {\n                return;\n            }\n\n            if (draggedIndex > targetIndex && draggedTop > targetCenter) {\n                return;\n            }\n\n            move(draggedListIndex, draggedIndex, targetIndex);\n        }\n    });\n\n    dragRef(dropRef(ref));\n\n    return (\n        <Container ref={ref} isDragging={isDragging}>\n           <header>\n               {data.labels.map(label => <Label key={label} color={label} />)}\n            </header> \n\n            <p>{data.content}</p>\n\n            { data.user && (<img src={data.user} alt=\"\"/>)}\n        </Container>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}